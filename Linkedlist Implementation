#include <iostream>
using namespace std;

// Defining a node structure for linked list
struct Node {
    int row;
    int col;
    int value;
    Node* next;
};

// Create a new node for the linked list
Node* createNode(int row, int col, int value) {
    Node* newNode = new Node();
    newNode->row = row;
    newNode->col = col;
    newNode->value = value;
    newNode->next = nullptr;
    return newNode;
}

// Function to insert a node at the end of the linked list
void insertNode(Node*& head, int row, int col, int value) {
    Node* newNode = createNode(row, col, value);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to display the linked list
void displayList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << "[" << temp->row << " " << temp->col << " " << temp->value << "]";
        temp = temp->next;
        if (temp != nullptr)
            cout << " -> ";
    }
    cout << " -> NULL" << endl;
}

// Function to delete all nodes in the linked list and release memory
void deleteList(Node*& head) {
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
    cout << "Linked list memory has been released." << endl;
}

int main() {
    // Sparse matrix
    int sparseMatrix[4][5] = {
        {0, 0, 3, 0, 4},
        {0, 0, 5, 7, 0},
        {0, 0, 0, 0, 0},
        {0, 2, 6, 0, 0}
    };

    Node* head = nullptr; 

    // Traverse the sparse matrix and insert non-zero elements into the linked list
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            if (sparseMatrix[i][j] != 0) {
                insertNode(head, i, j, sparseMatrix[i][j]);
            }
        }
    }

    // Output the linked list representation of the sparse matrix
    cout << "Linked List Representation of Sparse Matrix:" << endl;
    displayList(head);

    // Release the allocated memory
    deleteList(head);

    return 0;
}
