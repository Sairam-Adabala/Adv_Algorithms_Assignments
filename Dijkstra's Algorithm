#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <algorithm>

using namespace std;

const int INF = numeric_limits<int>::max();

struct GraphNode {
    int vertex;
    int cost;

    GraphNode(int v, int c) : vertex(v), cost(c) {}

    bool operator<(const GraphNode& other) const {
        return cost > other.cost;
    }
};

class Dijkstra {
private:
    vector<vector<int>> adjacencyMatrix;
    int nodes;

public:
    Dijkstra(int n) : nodes(n), adjacencyMatrix(n, vector<int>(n, 0)) {}

    void inputGraph() {
        cout << "Enter the adjacency matrix:" << endl;
        for (int i = 0; i < nodes; i++) {
            for (int j = 0; j < nodes; j++) {
                cin >> adjacencyMatrix[i][j];
            }
        }
    }

    vector<int> findShortestPath(int start, int end) {
        vector<int> distances(nodes, INF), parent(nodes, -1);
        priority_queue<GraphNode> pq;
        pq.push(GraphNode(start, 0));
        distances[start] = 0;

        while (!pq.empty()) {
            GraphNode current = pq.top();
            pq.pop();

            for (int neighbor = 0; neighbor < nodes; neighbor++) {
                if (adjacencyMatrix[current.vertex][neighbor] > 0) {
                    int newDistance = distances[current.vertex] + adjacencyMatrix[current.vertex][neighbor];

                    if (newDistance < distances[neighbor]) {
                        distances[neighbor] = newDistance;
                        parent[neighbor] = current.vertex;
                        pq.push(GraphNode(neighbor, newDistance));
                    }
                }
            }
        }

        if (distances[end] == INF) {
            return {}; // No path found
        }

        return reconstructPath(parent, start, end);
    }

    vector<int> reconstructPath(const vector<int>& parent, int start, int end) {
        vector<int> path;
        for (int current = end; current != -1; current = parent[current]) {
            path.push_back(current);
            if (current == start) break;
        }
        reverse(path.begin(), path.end());

        if (path.front() != start) {
            return {}; // Invalid path
        }

        return path;
    }
};

int main() {
    int n;
    cout << "Enter the number of nodes: ";
    cin >> n;

    Dijkstra graph(n);
    graph.inputGraph();

    int start, end;
    cout << "Enter the source node: ";
    cin >> start;
    cout << "Enter the destination node: ";
    cin >> end;

    vector<int> shortestPath = graph.findShortestPath(start, end);

    if (shortestPath.empty()) {
        cout << "No path exists between the source and destination." << endl;
    } else {
        cout << "Shortest path distance: " << shortestPath.size() - 1 << endl;
        cout << "Shortest path: ";
        for (int node : shortestPath) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}
