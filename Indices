#include <iostream>
#include <unordered_map>
#include <vector>

std::vector<int> findIndices(std::vector<int>& nums, int trgt) {
    std::unordered_map<int, int> numMap;
    for (int i = 0; i < nums.size(); i++) {
        int constraint = trgt - nums[i];
        if (numMap.find(constraint) != numMap.end()) {
            return {numMap[constraint], i};
        }
        numMap[nums[i]] = i;
    }
    return {};
}

int main() {
    int n, trgt;
    std::cin >> n;
    if (n < 2 || n > 10000) {
        std::cerr << "Array size must be between 2 and 10,000." << std::endl;
        return 1;
    }
    
    std::vector<int> nums(n);
    for (int i = 0; i < n; i++) {
        std::cin >> nums[i];
        if (nums[i] < -1000000000 || nums[i] > 1000000000) {
            std::cerr << "Array elements must be between -10^9 and 10^9." << std::endl;
            return 1;
        }
    }

    std::cin >> trgt;
    if (trgt < -1000000000 || trgt > 1000000000) {
        std::cerr << "Target value must be between -10^9 and 10^9." << std::endl;
        return 1;
    }

    std::vector<int> result = findIndices(nums, trgt);
    if (!result.empty()) {
        std::cout << result[0] << " " << result[1] << std::endl;
    } else {
        std::cout << "No solution" << std::endl;
    }

    return 0;
}
